name: DownloadPreviewImagesJSON_Unstuck

concurrency:
  group: download-preview-images
  cancel-in-progress: true

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 0 */14 * *'  # 每 14 天触发一次

jobs:
  DownloadPreviewImagesJSON:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        maps_path:
          - 'cs2/kz/counterstrikesharp/configs/plugins/MapChooser/MapPing.json'
          - 'cs2/mg/counterstrikesharp/configs/plugins/MapChooser/MapPing.json'
          - 'cs2/mgcourse/counterstrikesharp/configs/plugins/MapChooser/MapPing.json'
      max-parallel: 1

    steps:
    - name: 检出代码库
      uses: actions/checkout@v3
      with:
        ref: master
        fetch-depth: 0

    - name: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install requests pillow tqdm

    - name: 清空 map_previews_images 文件夹
      run: |
        mkdir -p map_previews_images
        rm -rf map_previews_images/*

    - name: 运行脚本
      id: check_script
      timeout-minutes: 10
      run: |
        python scripts/DownloadPreviewImagesByMappingJson.py ${{ matrix.maps_path }}

    - name: 压缩 map_previews_images 文件夹
      if: always()
      run: |
        timestamp=$(date +%Y%m%d%H%M%S)
        folder_name="map_previews_images_$timestamp"
        zip -r "$folder_name.zip" map_previews_images
        echo "timestamp=$timestamp" >> $GITHUB_ENV

    - name: 上传压缩文件作为 Artifact
      uses: actions/upload-artifact@v4.0.0
      with:
        name: map_previews_images_${{ github.run_number }}
        path: map_previews_images_${{ env.timestamp }}.zip
        if-no-files-found: warn
        compression-level: 6

    - name: 上传压缩文件到UPKK远程服务器
      timeout-minutes: 5
      run: |
        RESPONSE=$(curl -X POST -H "Content-Type: multipart/form-data" \
          -F "token=${{ secrets.SECRET_TOKEN }}" \
          -F "file=@map_previews_images_${{ env.timestamp }}.zip" \
          https://bbs.upkk.com/plugin.php?id=xnet_core_api:GithubAction_map_previews_images)

        echo "Server Response: $RESPONSE"

        STATUS=$(echo "$RESPONSE" | jq -r '.status')
        MESSAGE=$(echo "$RESPONSE" | jq -r '.message')

        if [ "$STATUS" != "success" ] || [ "$MESSAGE" != "File uploaded and extracted successfully." ]; then
          echo "Upload failed or unexpected response from server."
          exit 1
        fi

        echo "Upload and extraction succeeded."
